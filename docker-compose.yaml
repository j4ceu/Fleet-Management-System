version: "3.8"

services:
  db:
    image: postgres:15
    container_name: fleet-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fleetdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./internal/infrastructure/db/init-db:/docker-entrypoint-initdb.d
    networks:
      - fleet-network

  mqtt:
    image: eclipse-mosquitto
    container_name: mqtt-broker
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
    networks:
      - fleet-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - fleet-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fleet-app
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/fleetdb?sslmode=disable
      - MQTT_BROKER=tcp://mqtt:1883
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      mqtt:
        condition: service_started
      rabbitmq:
        condition: service_healthy   

    ports:
      - "8080:8080"
    networks:
      - fleet-network  

  publisher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mqtt-publisher
    command: ./publisher
    environment:
      - MQTT_BROKER=tcp://mqtt:1883
    depends_on:
      mqtt:
        condition: service_started
      app:
        condition: service_started
    restart: unless-stopped
    networks:
      - fleet-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: geofence-alert-worker
    command: ./worker
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped
    networks:
      - fleet-network

volumes:
  db_data:

networks:
  fleet-network:
    driver: bridge